{"ast":null,"code":"/*import React, { useState } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n  const login = async()=>{\r\nconsole.log(\"Login function executed\");\r\n  }\r\n  const signup = async()=>{\r\n    console.log(\"Signup function executed\");\r\n  }\r\n//const [state,setState] = useState(\"Login\");\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      <div className=\"form-wrapper\">\r\n        <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n        <form>\r\n          {!isLogin && (\r\n            <>\r\n              <label>Full Name</label>\r\n              <input type=\"text\" placeholder=\"Enter your name\" />\r\n            </>\r\n          )}\r\n          <label>Email</label>\r\n          <input type=\"email\" placeholder=\"Enter your email\" />\r\n          <label>Password</label>\r\n          <input type=\"password\" placeholder=\"Enter your password\" />\r\n          <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n        </form>\r\n        <p onClick={toggleForm} className=\"toggle-text\">\r\n          {isLogin\r\n            ? \"Don't have an account? Sign up\"\r\n            : 'Already have an account? Login'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nimport React, { useState } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // Login function\r\n  const login = async () => {\r\n    console.log('Login function executed with:', formData);\r\n    try {\r\n      // Send a POST request to the signup endpoint\r\n      const response = await fetch('http://localhost:4000/login', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: formData.name, // Ensure formData.name is populated\r\n              email: formData.email,\r\n              password: formData.password,\r\n          }),\r\n      });\r\n\r\n      // Parse the response JSON\r\n      const data = await response.json();\r\n\r\n      // Handle non-OK responses\r\n      if (!response.ok) {\r\n          // Check if the error is for an existing user\r\n          if (data.error === \"existing user found with same email address\") {\r\n              alert(\"A user with this email already exists. Please use a different email.\");\r\n          } else {\r\n              throw new Error(data.message || 'Signup failed');\r\n          }\r\n          return; // Exit the function if there's an error\r\n      }\r\n\r\n      console.log('Signup successful:', data);\r\n\r\n      // Store the auth token in local storage\r\n      localStorage.setItem('auth_token', data.token);\r\n\r\n      // Redirect to the homepage\r\n      window.location.replace(\"/\");\r\n  } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || \"Something went wrong during signup. Please try again.\");\r\n  }\r\n    \r\n  };\r\n // Signup function\r\n const signup = async () => {\r\n  try {\r\n      // Send a POST request to the signup endpoint\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: formData.name, // Ensure formData.name is populated\r\n              email: formData.email,\r\n              password: formData.password,\r\n          }),\r\n      });\r\n\r\n      // Parse the response JSON\r\n      const data = await response.json();\r\n\r\n      // Handle non-OK responses\r\n      if (!response.ok) {\r\n          // Check if the error is for an existing user\r\n          if (data.error === \"existing user found with same email address\") {\r\n              alert(\"A user with this email already exists. Please use a different email.\");\r\n          } else {\r\n              throw new Error(data.message || 'Signup failed');\r\n          }\r\n          return; // Exit the function if there's an error\r\n      }\r\n\r\n      console.log('Signup successful:', data);\r\n\r\n      // Store the auth token in local storage\r\n      localStorage.setItem('auth_token', data.token);\r\n\r\n      // Redirect to the homepage\r\n      window.location.replace(\"/\");\r\n  } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || \"Something went wrong during signup. Please try again.\");\r\n  }\r\n};\r\n\r\n\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      <div className=\"form-wrapper\">\r\n        <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          {!isLogin && (\r\n            <>\r\n              <label>Full Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n              />\r\n            </>\r\n          )}\r\n          <label>Email</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Enter your email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n          />\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Enter your password\"\r\n            value={formData.password}\r\n            onChange={handleChange}\r\n          />\r\n          <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n        </form>\r\n        <p onClick={toggleForm} className=\"toggle-text\">\r\n          {isLogin\r\n            ? \"Don't have an account? Sign up\"\r\n            : 'Already have an account? Login'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tracks if the user is logged in\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  // Check login state on component mount\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('auth_token');\r\n    setIsLoggedIn(!!token); // Set logged-in state based on token existence\r\n  }, []);\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Login function\r\n  const login = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Login failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      setIsLoggedIn(true); // Update login state\r\n      console.log('Login successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during login:', error.message || error);\r\n      alert(error.message || 'Something went wrong during login.');\r\n    }\r\n  };\r\n\r\n  // Signup function\r\n  const signup = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Signup failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      setIsLoggedIn(true); // Update login state\r\n      console.log('Signup successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || 'Something went wrong during signup.');\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  // Handle logout\r\n  const logout = () => {\r\n    localStorage.removeItem('auth_token'); // Remove token\r\n    setIsLoggedIn(false); // Update login state\r\n    setFormData({ name: '', email: '', password: '' }); // Clear form data\r\n    console.log('Logged out successfully');\r\n  };\r\n\r\n  // Toggle between showing login/signup form and logout option\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      {isLoggedIn ? (\r\n        <div className=\"logout-view\">\r\n          <div className=\"logout-wrapper\">\r\n          <h2>Welcome, User!</h2>\r\n          <button className=\"logout-wrapper\" onClick={logout}>Log Out</button>\r\n        </div></div>\r\n      ) : (\r\n        <div className=\"form-wrapper\">\r\n          <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            {!isLogin && (\r\n              <>\r\n                <label>Full Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                  value={formData.name}\r\n                  onChange={handleChange}\r\n                />\r\n              </>\r\n            )}\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n            />\r\n            <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n          </form>\r\n          <p onClick={toggleForm} className=\"toggle-text\">\r\n            {isLogin\r\n              ? \"Don't have an account? Sign up\"\r\n              : 'Already have an account? Login'}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n*/","map":{"version":3,"names":[],"sources":["C:/Users/Priyamvatha/Desktop/Gypsy/frontend/src/Pages/LoginSignup.jsx"],"sourcesContent":["/*import React, { useState } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n  const login = async()=>{\r\nconsole.log(\"Login function executed\");\r\n  }\r\n  const signup = async()=>{\r\n    console.log(\"Signup function executed\");\r\n  }\r\n//const [state,setState] = useState(\"Login\");\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      <div className=\"form-wrapper\">\r\n        <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n        <form>\r\n          {!isLogin && (\r\n            <>\r\n              <label>Full Name</label>\r\n              <input type=\"text\" placeholder=\"Enter your name\" />\r\n            </>\r\n          )}\r\n          <label>Email</label>\r\n          <input type=\"email\" placeholder=\"Enter your email\" />\r\n          <label>Password</label>\r\n          <input type=\"password\" placeholder=\"Enter your password\" />\r\n          <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n        </form>\r\n        <p onClick={toggleForm} className=\"toggle-text\">\r\n          {isLogin\r\n            ? \"Don't have an account? Sign up\"\r\n            : 'Already have an account? Login'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nimport React, { useState } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // Login function\r\n  const login = async () => {\r\n    console.log('Login function executed with:', formData);\r\n    try {\r\n      // Send a POST request to the signup endpoint\r\n      const response = await fetch('http://localhost:4000/login', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: formData.name, // Ensure formData.name is populated\r\n              email: formData.email,\r\n              password: formData.password,\r\n          }),\r\n      });\r\n\r\n      // Parse the response JSON\r\n      const data = await response.json();\r\n\r\n      // Handle non-OK responses\r\n      if (!response.ok) {\r\n          // Check if the error is for an existing user\r\n          if (data.error === \"existing user found with same email address\") {\r\n              alert(\"A user with this email already exists. Please use a different email.\");\r\n          } else {\r\n              throw new Error(data.message || 'Signup failed');\r\n          }\r\n          return; // Exit the function if there's an error\r\n      }\r\n\r\n      console.log('Signup successful:', data);\r\n\r\n      // Store the auth token in local storage\r\n      localStorage.setItem('auth_token', data.token);\r\n\r\n      // Redirect to the homepage\r\n      window.location.replace(\"/\");\r\n  } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || \"Something went wrong during signup. Please try again.\");\r\n  }\r\n    \r\n  };\r\n // Signup function\r\n const signup = async () => {\r\n  try {\r\n      // Send a POST request to the signup endpoint\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: formData.name, // Ensure formData.name is populated\r\n              email: formData.email,\r\n              password: formData.password,\r\n          }),\r\n      });\r\n\r\n      // Parse the response JSON\r\n      const data = await response.json();\r\n\r\n      // Handle non-OK responses\r\n      if (!response.ok) {\r\n          // Check if the error is for an existing user\r\n          if (data.error === \"existing user found with same email address\") {\r\n              alert(\"A user with this email already exists. Please use a different email.\");\r\n          } else {\r\n              throw new Error(data.message || 'Signup failed');\r\n          }\r\n          return; // Exit the function if there's an error\r\n      }\r\n\r\n      console.log('Signup successful:', data);\r\n\r\n      // Store the auth token in local storage\r\n      localStorage.setItem('auth_token', data.token);\r\n\r\n      // Redirect to the homepage\r\n      window.location.replace(\"/\");\r\n  } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || \"Something went wrong during signup. Please try again.\");\r\n  }\r\n};\r\n\r\n\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      <div className=\"form-wrapper\">\r\n        <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          {!isLogin && (\r\n            <>\r\n              <label>Full Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n              />\r\n            </>\r\n          )}\r\n          <label>Email</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Enter your email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n          />\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Enter your password\"\r\n            value={formData.password}\r\n            onChange={handleChange}\r\n          />\r\n          <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n        </form>\r\n        <p onClick={toggleForm} className=\"toggle-text\">\r\n          {isLogin\r\n            ? \"Don't have an account? Sign up\"\r\n            : 'Already have an account? Login'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tracks if the user is logged in\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  // Check login state on component mount\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('auth_token');\r\n    setIsLoggedIn(!!token); // Set logged-in state based on token existence\r\n  }, []);\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Login function\r\n  const login = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Login failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      setIsLoggedIn(true); // Update login state\r\n      console.log('Login successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during login:', error.message || error);\r\n      alert(error.message || 'Something went wrong during login.');\r\n    }\r\n  };\r\n\r\n  // Signup function\r\n  const signup = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Signup failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      setIsLoggedIn(true); // Update login state\r\n      console.log('Signup successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || 'Something went wrong during signup.');\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  // Handle logout\r\n  const logout = () => {\r\n    localStorage.removeItem('auth_token'); // Remove token\r\n    setIsLoggedIn(false); // Update login state\r\n    setFormData({ name: '', email: '', password: '' }); // Clear form data\r\n    console.log('Logged out successfully');\r\n  };\r\n\r\n  // Toggle between showing login/signup form and logout option\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      {isLoggedIn ? (\r\n        <div className=\"logout-view\">\r\n          <div className=\"logout-wrapper\">\r\n          <h2>Welcome, User!</h2>\r\n          <button className=\"logout-wrapper\" onClick={logout}>Log Out</button>\r\n        </div></div>\r\n      ) : (\r\n        <div className=\"form-wrapper\">\r\n          <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            {!isLogin && (\r\n              <>\r\n                <label>Full Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                  value={formData.name}\r\n                  onChange={handleChange}\r\n                />\r\n              </>\r\n            )}\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n            />\r\n            <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n          </form>\r\n          <p onClick={toggleForm} className=\"toggle-text\">\r\n            {isLogin\r\n              ? \"Don't have an account? Sign up\"\r\n              : 'Already have an account? Login'}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n*/\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}