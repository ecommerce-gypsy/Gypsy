{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Priyamvatha\\\\Desktop\\\\Gypsy\\\\frontend\\\\src\\\\Pages\\\\LoginSignup.jsx\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n  const login = async()=>{\r\nconsole.log(\"Login function executed\");\r\n  }\r\n  const signup = async()=>{\r\n    console.log(\"Signup function executed\");\r\n  }\r\n//const [state,setState] = useState(\"Login\");\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      <div className=\"form-wrapper\">\r\n        <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n        <form>\r\n          {!isLogin && (\r\n            <>\r\n              <label>Full Name</label>\r\n              <input type=\"text\" placeholder=\"Enter your name\" />\r\n            </>\r\n          )}\r\n          <label>Email</label>\r\n          <input type=\"email\" placeholder=\"Enter your email\" />\r\n          <label>Password</label>\r\n          <input type=\"password\" placeholder=\"Enter your password\" />\r\n          <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n        </form>\r\n        <p onClick={toggleForm} className=\"toggle-text\">\r\n          {isLogin\r\n            ? \"Don't have an account? Sign up\"\r\n            : 'Already have an account? Login'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nimport React, { useState } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // Login function\r\n  const login = async () => {\r\n    console.log('Login function executed with:', formData);\r\n    try {\r\n      // Send a POST request to the signup endpoint\r\n      const response = await fetch('http://localhost:4000/login', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: formData.name, // Ensure formData.name is populated\r\n              email: formData.email,\r\n              password: formData.password,\r\n          }),\r\n      });\r\n\r\n      // Parse the response JSON\r\n      const data = await response.json();\r\n\r\n      // Handle non-OK responses\r\n      if (!response.ok) {\r\n          // Check if the error is for an existing user\r\n          if (data.error === \"existing user found with same email address\") {\r\n              alert(\"A user with this email already exists. Please use a different email.\");\r\n          } else {\r\n              throw new Error(data.message || 'Signup failed');\r\n          }\r\n          return; // Exit the function if there's an error\r\n      }\r\n\r\n      console.log('Signup successful:', data);\r\n\r\n      // Store the auth token in local storage\r\n      localStorage.setItem('auth_token', data.token);\r\n\r\n      // Redirect to the homepage\r\n      window.location.replace(\"/\");\r\n  } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || \"Something went wrong during signup. Please try again.\");\r\n  }\r\n    \r\n  };\r\n // Signup function\r\n const signup = async () => {\r\n  try {\r\n      // Send a POST request to the signup endpoint\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: formData.name, // Ensure formData.name is populated\r\n              email: formData.email,\r\n              password: formData.password,\r\n          }),\r\n      });\r\n\r\n      // Parse the response JSON\r\n      const data = await response.json();\r\n\r\n      // Handle non-OK responses\r\n      if (!response.ok) {\r\n          // Check if the error is for an existing user\r\n          if (data.error === \"existing user found with same email address\") {\r\n              alert(\"A user with this email already exists. Please use a different email.\");\r\n          } else {\r\n              throw new Error(data.message || 'Signup failed');\r\n          }\r\n          return; // Exit the function if there's an error\r\n      }\r\n\r\n      console.log('Signup successful:', data);\r\n\r\n      // Store the auth token in local storage\r\n      localStorage.setItem('auth_token', data.token);\r\n\r\n      // Redirect to the homepage\r\n      window.location.replace(\"/\");\r\n  } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || \"Something went wrong during signup. Please try again.\");\r\n  }\r\n};\r\n\r\n\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      <div className=\"form-wrapper\">\r\n        <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          {!isLogin && (\r\n            <>\r\n              <label>Full Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n              />\r\n            </>\r\n          )}\r\n          <label>Email</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Enter your email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n          />\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Enter your password\"\r\n            value={formData.password}\r\n            onChange={handleChange}\r\n          />\r\n          <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n        </form>\r\n        <p onClick={toggleForm} className=\"toggle-text\">\r\n          {isLogin\r\n            ? \"Don't have an account? Sign up\"\r\n            : 'Already have an account? Login'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tracks if the user is logged in\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  // Check login state on component mount\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('auth_token');\r\n    setIsLoggedIn(!!token); // Set logged-in state based on token existence\r\n  }, []);\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Login function\r\n  const login = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Login failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      setIsLoggedIn(true); // Update login state\r\n      console.log('Login successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during login:', error.message || error);\r\n      alert(error.message || 'Something went wrong during login.');\r\n    }\r\n  };\r\n\r\n  // Signup function\r\n  const signup = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Signup failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      setIsLoggedIn(true); // Update login state\r\n      console.log('Signup successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || 'Something went wrong during signup.');\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  // Handle logout\r\n  const logout = () => {\r\n    localStorage.removeItem('auth_token'); // Remove token\r\n    setIsLoggedIn(false); // Update login state\r\n    setFormData({ name: '', email: '', password: '' }); // Clear form data\r\n    console.log('Logged out successfully');\r\n  };\r\n\r\n  // Toggle between showing login/signup form and logout option\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      {isLoggedIn ? (\r\n        <div className=\"logout-view\">\r\n          <div className=\"logout-wrapper\">\r\n          <h2>Welcome, User!</h2>\r\n          <button className=\"logout-wrapper\" onClick={logout}>Log Out</button>\r\n        </div></div>\r\n      ) : (\r\n        <div className=\"form-wrapper\">\r\n          <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            {!isLogin && (\r\n              <>\r\n                <label>Full Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                  value={formData.name}\r\n                  onChange={handleChange}\r\n                />\r\n              </>\r\n            )}\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n            />\r\n            <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n          </form>\r\n          <p onClick={toggleForm} className=\"toggle-text\">\r\n            {isLogin\r\n              ? \"Don't have an account? Sign up\"\r\n              : 'Already have an account? Login'}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n*/\nimport React, { useState, useEffect } from 'react';\nimport './LoginSignup.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const LoginSignup = () => {\n  _s();\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tracks if the user is logged in\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: ''\n  });\n  const [userName, setUserName] = useState(''); // State for storing the username\n\n  // Check login state and fetch the username from localStorage\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token');\n    const storedUserName = localStorage.getItem('user_name'); // Assume user name is stored in localStorage\n    setIsLoggedIn(!!token); // Set logged-in state based on token existence\n    setUserName(storedUserName || ''); // Set the username state\n  }, []);\n\n  // Toggle between Login and Sign Up forms\n  const toggleForm = () => setIsLogin(!isLogin);\n\n  // Handle input changes\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Login function\n  const login = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message || 'Login failed');\n      localStorage.setItem('auth_token', data.token); // Save token\n      localStorage.setItem('user_name', formData.name); // Store the name after login\n      setIsLoggedIn(true); // Update login state\n      setUserName(formData.name); // Update userName state\n      console.log('Login successful:', data);\n    } catch (error) {\n      console.error('Error during login:', error.message || error);\n      alert(error.message || 'Something went wrong during login.');\n    }\n  };\n\n  // Signup function\n  const signup = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message || 'Signup failed');\n      localStorage.setItem('auth_token', data.token); // Save token\n      localStorage.setItem('user_name', formData.name); // Store the name after signup\n      setIsLoggedIn(true); // Update login state\n      setUserName(formData.name); // Update userName state\n      console.log('Signup successful:', data);\n    } catch (error) {\n      console.error('Error during signup:', error.message || error);\n      alert(error.message || 'Something went wrong during signup.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault(); // Prevent the page from reloading\n    if (!isLogin && !formData.name) {\n      alert('Please enter your name for signup!');\n      return;\n    }\n    if (!formData.email || !formData.password) {\n      alert('Please fill all the fields!');\n      return;\n    }\n    if (isLogin) {\n      login(); // Call the login function\n    } else {\n      signup(); // Call the signup function\n    }\n  };\n\n  // Handle logout\n  const logout = () => {\n    localStorage.removeItem('auth_token'); // Remove token\n    localStorage.removeItem('user_name'); // Remove username\n    setIsLoggedIn(false); // Update login state\n    setFormData({\n      name: '',\n      email: '',\n      password: ''\n    }); // Clear form data\n    setUserName(''); // Clear username state\n    console.log('Logged out successfully');\n  };\n\n  // Toggle between showing login/signup form and logout option\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-signup-container\",\n    children: isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logout-view\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logout-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Welcome, \", userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-wrapper\",\n          onClick: logout,\n          children: \"Log Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: isLogin ? 'Login' : 'Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [!isLogin && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Full Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            placeholder: \"Enter your name\",\n            value: formData.name,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Enter your email\",\n          value: formData.email,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"Enter your password\",\n          value: formData.password,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: isLogin ? 'Login' : 'Sign Up'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: toggleForm,\n        className: \"toggle-text\",\n        children: isLogin ? \"Don't have an account? Sign up\" : 'Already have an account? Login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 483,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginSignup, \"fOPyXbW1H4fu6GyIWLf1UUp0PLA=\");\n_c = LoginSignup;\nvar _c;\n$RefreshReg$(_c, \"LoginSignup\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginSignup","_s","isLogin","setIsLogin","isLoggedIn","setIsLoggedIn","formData","setFormData","name","email","password","userName","setUserName","token","localStorage","getItem","storedUserName","toggleForm","handleChange","e","target","value","login","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","setItem","console","log","error","alert","signup","handleSubmit","preventDefault","logout","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Priyamvatha/Desktop/Gypsy/frontend/src/Pages/LoginSignup.jsx"],"sourcesContent":["/*import React, { useState } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n  const login = async()=>{\r\nconsole.log(\"Login function executed\");\r\n  }\r\n  const signup = async()=>{\r\n    console.log(\"Signup function executed\");\r\n  }\r\n//const [state,setState] = useState(\"Login\");\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      <div className=\"form-wrapper\">\r\n        <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n        <form>\r\n          {!isLogin && (\r\n            <>\r\n              <label>Full Name</label>\r\n              <input type=\"text\" placeholder=\"Enter your name\" />\r\n            </>\r\n          )}\r\n          <label>Email</label>\r\n          <input type=\"email\" placeholder=\"Enter your email\" />\r\n          <label>Password</label>\r\n          <input type=\"password\" placeholder=\"Enter your password\" />\r\n          <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n        </form>\r\n        <p onClick={toggleForm} className=\"toggle-text\">\r\n          {isLogin\r\n            ? \"Don't have an account? Sign up\"\r\n            : 'Already have an account? Login'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nimport React, { useState } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // Login function\r\n  const login = async () => {\r\n    console.log('Login function executed with:', formData);\r\n    try {\r\n      // Send a POST request to the signup endpoint\r\n      const response = await fetch('http://localhost:4000/login', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: formData.name, // Ensure formData.name is populated\r\n              email: formData.email,\r\n              password: formData.password,\r\n          }),\r\n      });\r\n\r\n      // Parse the response JSON\r\n      const data = await response.json();\r\n\r\n      // Handle non-OK responses\r\n      if (!response.ok) {\r\n          // Check if the error is for an existing user\r\n          if (data.error === \"existing user found with same email address\") {\r\n              alert(\"A user with this email already exists. Please use a different email.\");\r\n          } else {\r\n              throw new Error(data.message || 'Signup failed');\r\n          }\r\n          return; // Exit the function if there's an error\r\n      }\r\n\r\n      console.log('Signup successful:', data);\r\n\r\n      // Store the auth token in local storage\r\n      localStorage.setItem('auth_token', data.token);\r\n\r\n      // Redirect to the homepage\r\n      window.location.replace(\"/\");\r\n  } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || \"Something went wrong during signup. Please try again.\");\r\n  }\r\n    \r\n  };\r\n // Signup function\r\n const signup = async () => {\r\n  try {\r\n      // Send a POST request to the signup endpoint\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              name: formData.name, // Ensure formData.name is populated\r\n              email: formData.email,\r\n              password: formData.password,\r\n          }),\r\n      });\r\n\r\n      // Parse the response JSON\r\n      const data = await response.json();\r\n\r\n      // Handle non-OK responses\r\n      if (!response.ok) {\r\n          // Check if the error is for an existing user\r\n          if (data.error === \"existing user found with same email address\") {\r\n              alert(\"A user with this email already exists. Please use a different email.\");\r\n          } else {\r\n              throw new Error(data.message || 'Signup failed');\r\n          }\r\n          return; // Exit the function if there's an error\r\n      }\r\n\r\n      console.log('Signup successful:', data);\r\n\r\n      // Store the auth token in local storage\r\n      localStorage.setItem('auth_token', data.token);\r\n\r\n      // Redirect to the homepage\r\n      window.location.replace(\"/\");\r\n  } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || \"Something went wrong during signup. Please try again.\");\r\n  }\r\n};\r\n\r\n\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      <div className=\"form-wrapper\">\r\n        <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          {!isLogin && (\r\n            <>\r\n              <label>Full Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n              />\r\n            </>\r\n          )}\r\n          <label>Email</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Enter your email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n          />\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Enter your password\"\r\n            value={formData.password}\r\n            onChange={handleChange}\r\n          />\r\n          <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n        </form>\r\n        <p onClick={toggleForm} className=\"toggle-text\">\r\n          {isLogin\r\n            ? \"Don't have an account? Sign up\"\r\n            : 'Already have an account? Login'}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tracks if the user is logged in\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  // Check login state on component mount\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('auth_token');\r\n    setIsLoggedIn(!!token); // Set logged-in state based on token existence\r\n  }, []);\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Login function\r\n  const login = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Login failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      setIsLoggedIn(true); // Update login state\r\n      console.log('Login successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during login:', error.message || error);\r\n      alert(error.message || 'Something went wrong during login.');\r\n    }\r\n  };\r\n\r\n  // Signup function\r\n  const signup = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Signup failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      setIsLoggedIn(true); // Update login state\r\n      console.log('Signup successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || 'Something went wrong during signup.');\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  // Handle logout\r\n  const logout = () => {\r\n    localStorage.removeItem('auth_token'); // Remove token\r\n    setIsLoggedIn(false); // Update login state\r\n    setFormData({ name: '', email: '', password: '' }); // Clear form data\r\n    console.log('Logged out successfully');\r\n  };\r\n\r\n  // Toggle between showing login/signup form and logout option\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      {isLoggedIn ? (\r\n        <div className=\"logout-view\">\r\n          <div className=\"logout-wrapper\">\r\n          <h2>Welcome, User!</h2>\r\n          <button className=\"logout-wrapper\" onClick={logout}>Log Out</button>\r\n        </div></div>\r\n      ) : (\r\n        <div className=\"form-wrapper\">\r\n          <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            {!isLogin && (\r\n              <>\r\n                <label>Full Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                  value={formData.name}\r\n                  onChange={handleChange}\r\n                />\r\n              </>\r\n            )}\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n            />\r\n            <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n          </form>\r\n          <p onClick={toggleForm} className=\"toggle-text\">\r\n            {isLogin\r\n              ? \"Don't have an account? Sign up\"\r\n              : 'Already have an account? Login'}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport './LoginSignup.css';\r\n\r\nexport const LoginSignup = () => {\r\n  const [isLogin, setIsLogin] = useState(true); // Tracks whether the form is in Login or Sign Up mode\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tracks if the user is logged in\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  const [userName, setUserName] = useState(''); // State for storing the username\r\n\r\n  // Check login state and fetch the username from localStorage\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('auth_token');\r\n    const storedUserName = localStorage.getItem('user_name'); // Assume user name is stored in localStorage\r\n    setIsLoggedIn(!!token); // Set logged-in state based on token existence\r\n    setUserName(storedUserName || ''); // Set the username state\r\n  }, []);\r\n\r\n  // Toggle between Login and Sign Up forms\r\n  const toggleForm = () => setIsLogin(!isLogin);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // Login function\r\n  const login = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Login failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      localStorage.setItem('user_name', formData.name); // Store the name after login\r\n      setIsLoggedIn(true); // Update login state\r\n      setUserName(formData.name); // Update userName state\r\n      console.log('Login successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during login:', error.message || error);\r\n      alert(error.message || 'Something went wrong during login.');\r\n    }\r\n  };\r\n\r\n  // Signup function\r\n  const signup = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:4000/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Signup failed');\r\n\r\n      localStorage.setItem('auth_token', data.token); // Save token\r\n      localStorage.setItem('user_name', formData.name); // Store the name after signup\r\n      setIsLoggedIn(true); // Update login state\r\n      setUserName(formData.name); // Update userName state\r\n      console.log('Signup successful:', data);\r\n    } catch (error) {\r\n      console.error('Error during signup:', error.message || error);\r\n      alert(error.message || 'Something went wrong during signup.');\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent the page from reloading\r\n    if (!isLogin && !formData.name) {\r\n      alert('Please enter your name for signup!');\r\n      return;\r\n    }\r\n    if (!formData.email || !formData.password) {\r\n      alert('Please fill all the fields!');\r\n      return;\r\n    }\r\n    if (isLogin) {\r\n      login(); // Call the login function\r\n    } else {\r\n      signup(); // Call the signup function\r\n    }\r\n  };\r\n\r\n  // Handle logout\r\n  const logout = () => {\r\n    localStorage.removeItem('auth_token'); // Remove token\r\n    localStorage.removeItem('user_name'); // Remove username\r\n    setIsLoggedIn(false); // Update login state\r\n    setFormData({ name: '', email: '', password: '' }); // Clear form data\r\n    setUserName(''); // Clear username state\r\n    console.log('Logged out successfully');\r\n  };\r\n\r\n  // Toggle between showing login/signup form and logout option\r\n  return (\r\n    <div className=\"login-signup-container\">\r\n      {isLoggedIn ? (\r\n        <div className=\"logout-view\">\r\n          <div className=\"logout-wrapper\">\r\n            <h2>Welcome, {userName}!</h2> {/* Display the logged-in user's name */}\r\n            <button className=\"logout-wrapper\" onClick={logout}>Log Out</button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"form-wrapper\">\r\n          <h2>{isLogin ? 'Login' : 'Sign Up'}</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            {!isLogin && (\r\n              <>\r\n                <label>Full Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                  value={formData.name}\r\n                  onChange={handleChange}\r\n                />\r\n              </>\r\n            )}\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n            />\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n            />\r\n            <button type=\"submit\">{isLogin ? 'Login' : 'Sign Up'}</button>\r\n          </form>\r\n          <p onClick={toggleForm} className=\"toggle-text\">\r\n            {isLogin\r\n              ? \"Don't have an account? Sign up\"\r\n              : 'Already have an account? Login'}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}