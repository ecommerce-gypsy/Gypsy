{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sakthi\\\\Desktop\\\\login-signup\\\\frontend\\\\src\\\\PaintApp.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaintApp = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [brushColor, setBrushColor] = useState(\"#000000\");\n  const [brushSize, setBrushSize] = useState(5);\n  const [circleCount, setCircleCount] = useState(0);\n  const [circleRadius, setCircleRadius] = useState(30); // Default radius\n  const [circles, setCircles] = useState([]); // Store circles\n  const [draggingCircle, setDraggingCircle] = useState(null); // Circle being dragged\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  }); // Offset of the mouse relative to the circle center\n\n  // Initialize the canvas context\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth * 0.8; // Full width minus padding\n    canvas.height = 500; // Fixed height\n    canvas.style.border = \"1px solid black\";\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.strokeStyle = brushColor;\n    ctx.lineWidth = brushSize;\n    contextRef.current = ctx;\n  }, [brushColor, brushSize]); // Add dependencies for dynamic updates\n\n  // Function to draw circles\n  const drawCircle = ({\n    x,\n    y,\n    radius\n  }) => {\n    contextRef.current.beginPath();\n    contextRef.current.arc(x, y, radius, 0, 2 * Math.PI);\n    contextRef.current.fill();\n    contextRef.current.stroke();\n  };\n\n  // Draw all circles in the circles array\n  const redrawCircles = () => {\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height); // Clear canvas\n    circles.forEach(circle => drawCircle(circle)); // Redraw each circle\n  };\n\n  // Mouse move event to drag the circle\n  const onMouseMove = ({\n    nativeEvent\n  }) => {\n    if (draggingCircle) {\n      const {\n        offsetX,\n        offsetY\n      } = nativeEvent;\n      // Update the position of the circle being dragged\n      const newCircle = {\n        ...draggingCircle,\n        x: offsetX - dragOffset.x,\n        y: offsetY - dragOffset.y\n      };\n      const updatedCircles = circles.map(circle => circle === draggingCircle ? newCircle : circle);\n      setCircles(updatedCircles); // Update the circles array\n      redrawCircles(); // Redraw the canvas with updated circles\n    }\n  };\n\n  // Mouse up event to stop dragging\n  const onMouseUp = () => {\n    setDraggingCircle(null); // Stop dragging\n  };\n\n  // Add a new circle at the mouse position\n  const addCircle = ({\n    nativeEvent\n  }) => {\n    if (circleCount >= 30) return; // Limit to 30 circles\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    const newCircle = {\n      x: offsetX,\n      y: offsetY,\n      radius: circleRadius\n    };\n    setCircles(prevCircles => [...prevCircles, newCircle]);\n    setCircleCount(circleCount + 1);\n    redrawCircles(); // Redraw the circles\n  };\n\n  // Clear the canvas and reset state\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\n    setCircles([]);\n    setCircleCount(0); // Reset circle count\n  };\n\n  // Save the drawing\n  const saveDrawing = () => {\n    const canvas = canvasRef.current;\n    const link = document.createElement(\"a\");\n    link.download = \"my-drawing.png\";\n    link.href = canvas.toDataURL();\n    link.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Paint Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: \"10px\"\n        },\n        children: [\"Brush Color:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: brushColor,\n          onChange: e => setBrushColor(e.target.value),\n          style: {\n            marginLeft: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: \"10px\"\n        },\n        children: [\"Brush Size:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"50\",\n          value: brushSize,\n          onChange: e => setBrushSize(e.target.value),\n          style: {\n            marginLeft: \"5px\",\n            width: \"50px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: \"10px\"\n        },\n        children: [\"Circle Radius:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"5\",\n          max: \"100\",\n          value: circleRadius,\n          onChange: e => setCircleRadius(e.target.value),\n          style: {\n            marginLeft: \"5px\",\n            width: \"50px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        style: {\n          margin: \"0 10px\"\n        },\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveDrawing,\n        children: \"Save Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: addCircle // Add circle on click\n      ,\n      onMouseMove: onMouseMove // Drag the circle\n      ,\n      onMouseUp: onMouseUp // Stop dragging\n      ,\n      onMouseLeave: onMouseUp // Stop dragging if mouse leaves canvas\n      ,\n      style: {\n        cursor: \"crosshair\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Circles Drawn: \", circleCount, \" / 30\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(PaintApp, \"yIcFnFB3u+/WN27YHHDSg/NJGr4=\");\n_c = PaintApp;\nexport default PaintApp;\nvar _c;\n$RefreshReg$(_c, \"PaintApp\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","PaintApp","_s","canvasRef","contextRef","brushColor","setBrushColor","brushSize","setBrushSize","circleCount","setCircleCount","circleRadius","setCircleRadius","circles","setCircles","draggingCircle","setDraggingCircle","dragOffset","setDragOffset","x","y","canvas","current","width","window","innerWidth","height","style","border","ctx","getContext","lineCap","lineJoin","strokeStyle","lineWidth","drawCircle","radius","beginPath","arc","Math","PI","fill","stroke","redrawCircles","clearRect","forEach","circle","onMouseMove","nativeEvent","offsetX","offsetY","newCircle","updatedCircles","map","onMouseUp","addCircle","prevCircles","clearCanvas","saveDrawing","link","document","createElement","download","href","toDataURL","click","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","marginRight","type","value","onChange","e","target","marginLeft","min","max","onClick","margin","ref","onMouseDown","onMouseLeave","cursor","_c","$RefreshReg$"],"sources":["C:/Users/sakthi/Desktop/login-signup/frontend/src/PaintApp.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nconst PaintApp = () => {\r\n  const canvasRef = useRef(null);\r\n  const contextRef = useRef(null);\r\n  const [brushColor, setBrushColor] = useState(\"#000000\");\r\n  const [brushSize, setBrushSize] = useState(5);\r\n  const [circleCount, setCircleCount] = useState(0);\r\n  const [circleRadius, setCircleRadius] = useState(30); // Default radius\r\n  const [circles, setCircles] = useState([]); // Store circles\r\n  const [draggingCircle, setDraggingCircle] = useState(null); // Circle being dragged\r\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 }); // Offset of the mouse relative to the circle center\r\n\r\n  // Initialize the canvas context\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    canvas.width = window.innerWidth * 0.8; // Full width minus padding\r\n    canvas.height = 500; // Fixed height\r\n    canvas.style.border = \"1px solid black\";\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.lineCap = \"round\";\r\n    ctx.lineJoin = \"round\";\r\n    ctx.strokeStyle = brushColor;\r\n    ctx.lineWidth = brushSize;\r\n    contextRef.current = ctx;\r\n  }, [brushColor, brushSize]); // Add dependencies for dynamic updates\r\n\r\n  // Function to draw circles\r\n  const drawCircle = ({ x, y, radius }) => {\r\n    contextRef.current.beginPath();\r\n    contextRef.current.arc(x, y, radius, 0, 2 * Math.PI);\r\n    contextRef.current.fill();\r\n    contextRef.current.stroke();\r\n  };\r\n\r\n  // Draw all circles in the circles array\r\n  const redrawCircles = () => {\r\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height); // Clear canvas\r\n    circles.forEach((circle) => drawCircle(circle)); // Redraw each circle\r\n  };\r\n\r\n  // Mouse move event to drag the circle\r\n  const onMouseMove = ({ nativeEvent }) => {\r\n    if (draggingCircle) {\r\n      const { offsetX, offsetY } = nativeEvent;\r\n      // Update the position of the circle being dragged\r\n      const newCircle = {\r\n        ...draggingCircle,\r\n        x: offsetX - dragOffset.x,\r\n        y: offsetY - dragOffset.y,\r\n      };\r\n\r\n      const updatedCircles = circles.map((circle) =>\r\n        circle === draggingCircle ? newCircle : circle\r\n      );\r\n      setCircles(updatedCircles); // Update the circles array\r\n      redrawCircles(); // Redraw the canvas with updated circles\r\n    }\r\n  };\r\n\r\n  // Mouse up event to stop dragging\r\n  const onMouseUp = () => {\r\n    setDraggingCircle(null); // Stop dragging\r\n  };\r\n\r\n  // Add a new circle at the mouse position\r\n  const addCircle = ({ nativeEvent }) => {\r\n    if (circleCount >= 30) return; // Limit to 30 circles\r\n\r\n    const { offsetX, offsetY } = nativeEvent;\r\n\r\n    const newCircle = {\r\n      x: offsetX,\r\n      y: offsetY,\r\n      radius: circleRadius,\r\n    };\r\n\r\n    setCircles((prevCircles) => [...prevCircles, newCircle]);\r\n    setCircleCount(circleCount + 1);\r\n    redrawCircles(); // Redraw the circles\r\n  };\r\n\r\n  // Clear the canvas and reset state\r\n  const clearCanvas = () => {\r\n    const canvas = canvasRef.current;\r\n    contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\r\n    setCircles([]);\r\n    setCircleCount(0); // Reset circle count\r\n  };\r\n\r\n  // Save the drawing\r\n  const saveDrawing = () => {\r\n    const canvas = canvasRef.current;\r\n    const link = document.createElement(\"a\");\r\n    link.download = \"my-drawing.png\";\r\n    link.href = canvas.toDataURL();\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h1>Paint Application</h1>\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <label style={{ marginRight: \"10px\" }}>\r\n          Brush Color:\r\n          <input\r\n            type=\"color\"\r\n            value={brushColor}\r\n            onChange={(e) => setBrushColor(e.target.value)}\r\n            style={{ marginLeft: \"5px\" }}\r\n          />\r\n        </label>\r\n        <label style={{ marginRight: \"10px\" }}>\r\n          Brush Size:\r\n          <input\r\n            type=\"number\"\r\n            min=\"1\"\r\n            max=\"50\"\r\n            value={brushSize}\r\n            onChange={(e) => setBrushSize(e.target.value)}\r\n            style={{ marginLeft: \"5px\", width: \"50px\" }}\r\n          />\r\n        </label>\r\n        <label style={{ marginRight: \"10px\" }}>\r\n          Circle Radius:\r\n          <input\r\n            type=\"number\"\r\n            min=\"5\"\r\n            max=\"100\"\r\n            value={circleRadius}\r\n            onChange={(e) => setCircleRadius(e.target.value)}\r\n            style={{ marginLeft: \"5px\", width: \"50px\" }}\r\n          />\r\n        </label>\r\n        <button onClick={clearCanvas} style={{ margin: \"0 10px\" }}>\r\n          Clear Canvas\r\n        </button>\r\n        <button onClick={saveDrawing}>Save Drawing</button>\r\n      </div>\r\n      <canvas\r\n        ref={canvasRef}\r\n        onMouseDown={addCircle} // Add circle on click\r\n        onMouseMove={onMouseMove} // Drag the circle\r\n        onMouseUp={onMouseUp} // Stop dragging\r\n        onMouseLeave={onMouseUp} // Stop dragging if mouse leaves canvas\r\n        style={{\r\n          cursor: \"crosshair\",\r\n        }}\r\n      ></canvas>\r\n      <div>\r\n        <p>Circles Drawn: {circleCount} / 30</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaintApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}